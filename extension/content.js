// Global flag to prevent multiple initializations
window.TrackFlowInitialized = true;

let trackingData = [];
const BATCH_SIZE = 5;
const SEND_INTERVAL = 3000;

// WebSocket baÄŸlantÄ±sÄ±
let ws = null;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 5;
const RECONNECT_DELAY = 5000;

function initializeWebSocket() {
  if (ws) {
    ws.close();
  }

  ws = new WebSocket('ws://localhost:3001');

  ws.onopen = () => {
    console.log('ğŸŸ¢ WebSocket baÄŸlantÄ±sÄ± baÅŸarÄ±lÄ±');
    reconnectAttempts = 0;
  };

  ws.onerror = (error) => {
    console.error('ğŸ”´ WebSocket hatasÄ±:', error);
  };

  ws.onclose = () => {
    console.log('ğŸŸ¡ WebSocket baÄŸlantÄ±sÄ± kapandÄ±');
    if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
      reconnectAttempts++;
      console.log(`ğŸ”„ Yeniden baÄŸlanma denemesi ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS}`);
      setTimeout(initializeWebSocket, RECONNECT_DELAY);
    }
  };
}

initializeWebSocket();

// Fare hareketlerini izleme
function trackMouseMove(e) {
  const data = {
    event_type: 'mousemove',
    timestamp: Date.now(),
    element: {
      tag: e.target.tagName.toLowerCase(),
      id: e.target.id,
      class: e.target.className,
      position: {
        x: e.clientX,
        y: e.clientY
      }
    },
    page: {
      url: window.location.href,
      title: document.title,
      viewport: {
        width: window.innerWidth,
        height: window.innerHeight
      }
    }
  };
  
  trackingData.push(data);
  
  if (trackingData.length >= BATCH_SIZE) {
    sendTrackingData();
  }
}

// TÄ±klama olaylarÄ±nÄ± izleme
function trackClick(e) {
  const data = {
    event_type: 'click',
    timestamp: Date.now(),
    element: {
      tag: e.target.tagName.toLowerCase(),
      id: e.target.id,
      class: e.target.className,
      position: {
        x: e.clientX,
        y: e.clientY
      }
    },
    page: {
      url: window.location.href,
      title: document.title,
      viewport: {
        width: window.innerWidth,
        height: window.innerHeight
      }
    }
  };
  
  trackingData.push(data);
  sendTrackingData();
}

// Verileri gÃ¶nderme fonksiyonu
function sendTrackingData() {
  if (trackingData.length === 0) return;
  
  try {
    if (ws && ws.readyState === WebSocket.OPEN) {
      console.log('ğŸ“¤ WebSocket Ã¼zerinden gÃ¶nderilen veri:', {
        eventCount: trackingData.length,
        url: window.location.href
      });
      ws.send(JSON.stringify(trackingData));
      trackingData = [];
    } else {
      // WebSocket baÄŸlantÄ±sÄ± yoksa HTTP API'yi kullan
      chrome.storage.local.get(['jwt_token'], function(result) {
        if (!result.jwt_token) {
          console.error('ğŸ”´ JWT token bulunamadÄ±');
          return;
        }
        
        console.log('ğŸ“¤ HTTP API Ã¼zerinden veri gÃ¶nderiliyor...', {
          eventCount: trackingData.length,
          url: window.location.href
        });
        
        fetch('http://localhost:3001/api/track', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${result.jwt_token}`
          },
          body: JSON.stringify(trackingData)
        })
        .then(response => {
          if (!response.ok) throw new Error('API yanÄ±t hatasÄ±');
          console.log('âœ… Veri baÅŸarÄ±yla gÃ¶nderildi');
          trackingData = [];
        })
        .catch(error => {
          console.error('ğŸ”´ Veri gÃ¶nderme hatasÄ±:', error);
        });
      });
    }
  } catch (error) {
    console.error('ğŸ”´ Beklenmeyen hata:', error);
  }
}

// Event listener'larÄ± ekle
document.addEventListener('mousemove', trackMouseMove);
document.addEventListener('click', trackClick);

// Sayfa kapatÄ±lÄ±rken son verileri gÃ¶nder
window.addEventListener('beforeunload', () => {
  if (trackingData.length > 0) {
    sendTrackingData();
  }
});

// Periyodik veri gÃ¶nderimi
setInterval(sendTrackingData, SEND_INTERVAL);

// Tab gÃ¶rÃ¼nÃ¼rlÃ¼ÄŸÃ¼nÃ¼ izle
document.addEventListener('visibilitychange', () => {
  if (document.hidden) {
    // Sekme arka planda ise son verileri gÃ¶nder
    if (trackingData.length > 0) {
      sendTrackingData();
    }
  }
}); 